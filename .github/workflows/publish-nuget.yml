name: Publish NuGet Package

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g. v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: master

      - name: Checkout deployment tools
        run: |
          git clone -v https://${{ secrets.BITBUCKET_USER }}:${{ secrets.BITBUCKET_PASSWORD }}@bitbucket.org/lykke-snow/lykke.snow.deployment.git lykke.snow.deployment

      - name: Parse tag name
        run: |
          TAG_VERSION=${{ github.event.inputs.version }}
          TAG_NUMBERS=${TAG_VERSION#v} # Remove preceding "v" if present
          echo "TAG_NUMBERS=$TAG_NUMBERS" >> $GITHUB_ENV

      - name: Check for CHANGELOG.md and update placeholders
        run: |
          FILES=$(find . -type f -name 'CHANGELOG.md')
          if [[ -z "$FILES" ]]; then
            echo "CHANGELOG.md not found. Failing the workflow."
            exit 1
          fi

          COUNT=$(echo "$FILES" | wc -l)
          if [[ $COUNT -ne 1 ]]; then
            echo "Found $COUNT instances of CHANGELOG.md. There must be exactly one. Failing the workflow."
            exit 1
          fi
          
          source ./lykke.snow.deployment/tools/core/changelog.sh
          FILE=$(echo "$FILES" | head -n 1)
          TBD_REPLACED=$(replace_tbd_placeholder "$FILE" "${{ env.TAG_NUMBERS }}")
          if [[ $TBD_REPLACED -eq 0 ]]; then
            echo "CHANGELOG.md does not contain a placeholder for the new version. Failing the workflow."
            exit 1
          fi
      
      - name: Update csproj files with new version
        run: |
          FILES=$(find . -type f -name '*.csproj')
          if [[ -z "$FILES" ]]; then
            echo "No .csproj files found. Failing the workflow."
            exit 1
          fi
          for FILE in $FILES; do
            echo "Updating version in $FILE to ${{ env.TAG_NUMBERS }}"
            sed -i "s/<Version>.*<\/Version>/<Version>${{ env.TAG_NUMBERS }}<\/Version>/g" "$FILE"
          done
          
      - name: Commit and retag
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add -A
          git commit -m "Version ${{ env.TAG_NUMBERS }}"
          git tag -fa ${{ github.event.inputs.version }} -m "${{ github.event.inputs.version }}"
          git push origin --tags --force
          git push origin master
      
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x' # Using .NET 6

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: dotnet test --no-restore --verbosity normal

      - name: Pack
        run: dotnet pack --no-build --configuration Release -o out

      - name: Push
        run: dotnet nuget push out/*.nupkg --api-key ${{ secrets.NUGET_TOKEN }} --source https://api.nuget.org/v3/index.json --skip-duplicate
        
      - name: Extract delivery name and release notes
        run: |
          CHANGELOG_FILE=$(find . -type f -name 'CHANGELOG.md')

          DELIVERY_NAME=$(sed -n 's/^## [0-9.]* - \(.*\) ([0-9-]*)$/\1/p' "$CHANGELOG_FILE" | head -n 1)
          DELIVERY_NOTES=$(awk '/^## / { if (found) exit; if (!found) found=1; next } found && NF > 0 { print }' $CHANGELOG_FILE)

          echo "DELIVERY_NAME=$DELIVERY_NAME" >> $GITHUB_ENV
          echo "$DELIVERY_NOTES" > delivery_notes.txt
          echo "DELIVERY_NOTES_FILE=delivery_notes.txt" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: ${{ env.DELIVERY_NAME }}
          body_path: ${{ env.DELIVERY_NOTES_FILE }}
          draft: false
          prerelease: false
          
      - name: Clean up temporary files
        run: rm -f ${{ env.DELIVERY_NOTES_FILE }}
