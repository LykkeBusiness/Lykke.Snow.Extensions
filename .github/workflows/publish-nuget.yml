name: Publish NuGet Package

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Check for CHANGELOG.md and replace [[TBD]] or [[tbd]]
        run: |
          TAG_VERSION=${GITHUB_REF/refs\/tags\/v/} # Removing "v" prefix
          FILES=$(find . -type f -name 'CHANGELOG.md')
          if [[ -z "$FILES" ]]; then
            echo "CHANGELOG.md not found. Failing the workflow."
            exit 1
          fi
          COUNT=$(echo "$FILES" | wc -l)
          if [[ $COUNT -ne 1 ]]; then
            echo "Found $COUNT instances of CHANGELOG.md. There must be exactly one. Failing the workflow."
            exit 1
          fi
          FILE=$(echo "$FILES" | head -n 1)
          if ! grep -q -E '\[\[TBD\]\]|\[\[tbd\]\]' "$FILE"; then
            echo "[[TBD]] or [[tbd]] not found in $FILE. Failing the workflow."
            exit 1
          else
            sed -i "s/\[\[TBD\]\]/$TAG_VERSION/g" "$FILE"
            sed -i "s/\[\[tbd\]\]/$TAG_VERSION/g" "$FILE"
          fi
      
      - name: Update csproj files with new version
        run: |
          TAG_VERSION=${GITHUB_REF/refs\/tags\/v/} # Removing "v" prefix
          FILES=$(find . -type f -name '*.csproj')
          if [[ -z "$FILES" ]]; then
            echo "No .csproj files found. Failing the workflow."
            exit 1
          fi
          for FILE in $FILES; do
            echo "Updating version in $FILE to $TAG_VERSION"
            sed -i "s/<Version>.*<\/Version>/<Version>$TAG_VERSION<\/Version>/g" "$FILE"
          done
          
      - name: Commit and retag
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/} # Removing "refs/tags/" prefix
          TAG_VERSION=${TAG_NAME#v} # Removing "v" prefix
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add -A
          git commit -m "Version $TAG_VERSION"
          git tag -fa $TAG_NAME -m "$TAG_NAME"
          git push origin --tags --force
          git push origin master
      
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x' # Using .NET 6

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: dotnet test --no-restore --verbosity normal

      - name: Pack
        run: dotnet pack --no-build --configuration Release -o out

      - name: Push
        run: dotnet nuget push out/*.nupkg --api-key ${{ secrets.NUGET_TOKEN }} --source https://api.nuget.org/v3/index.json --skip-duplicate
        
      - name: Extract delivery name and release notes
        run: |
          TAG_VERSION=${GITHUB_REF/refs\/tags\/v/} # Removing "v" prefix
          CHANGELOG_FILE=$(find . -type f -name 'CHANGELOG.md')

          DELIVERY_NAME=$(sed -n 's/^## [0-9.]* - \(.*\) ([0-9-]*)$/\1/p' "$CHANGELOG_FILE" | head -n 1)
          echo "Delivery name: $DELIVERY_NAME"
          DELIVERY_NOTES=$(awk '/^## / { if (found) exit; found=1; print; next } found { print }' $CHANGELOG_FILE)
          echo "Delivery notes: $DELIVERY_NOTES"

          echo "DELIVERY_NAME_ENV_VAR<<EOF" >> $GITHUB_ENV
          echo $DELIVERY_NAME >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "DELIVERY_NOTES_ENV_VAR<<EOF" >> $GITHUB_ENV
          echo $DELIVERY_NOTES >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ env.DELIVERY_NAME_ENV_VAR }}
          body: ${{ env.DELIVERY_NOTES_ENV_VAR }}
          